on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: Deploy to Amazon ECS

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Check out source code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # ECR리포지토리 이름
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        #${{ github.sha }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Pushing image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#  deploy:
#    needs: build
#    name: Deploy
#    runs-on:
#      - self-hosted
#      - label-development
#    steps:
#      - name: Login to ghcr
#        uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GIT_ACS_TOKEN }}
#        - name: Docker run
#          run: |
#            docker ps -q --filter "name=$ECR_REGISTRY/$ECR_REPOSITORY" | grep -q . && docker stop $ECR_REGISTRY/$ECR_REPOSITORY && docker rm -fv $ECR_REGISTRY/$ECR_REPOSITORY
#            docker run -d -p 8080:8080 --name cicd --restart always ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}

#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task-definition.json
#        container-name: 컨테이너이름
#        image: ${{ steps.build-image.outputs.image }}
#      - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        # 서비스이름
#        service: 서비스이름
#        # 클러스터이름
#        cluster: ecs-ec2-seoul
#        wait-for-service-stability: true